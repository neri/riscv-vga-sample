//! QEMU virtio-vga driver (WIP)

pub unsafe fn set_mode13(io_base: *mut u8) {
    unsafe {
        let port0300: *mut u8 = io_base.add(0x400 - 0xC0);
        for (vport, index, data) in MODE_13_REGS {
            let vport = vport as usize;
            let port = port0300.add(vport);

            match vport {
                0xC0 => {
                    port0300.add(0xDA).write_volatile(0);
                    port.write_volatile(index);
                    port.write_volatile(data);
                }
                0xC2 => {
                    port.write_volatile(data);
                }
                _ => {
                    port.write_volatile(index);
                    port.add(1).write_volatile(data);
                }
            }
        }

        io_base.add(0x406).write_volatile(0xFF);
        io_base.add(0x408).write_volatile(0);
        let p = io_base.add(0x409);
        for rgb in PALETTE.into_iter() {
            let b = rgb as u8;
            let g = (rgb >> 8) as u8;
            let r = (rgb >> 16) as u8;

            p.write_volatile(r);
            p.write_volatile(g);
            p.write_volatile(b);
        }
    }
}

// Register values to set mode13h
// (vport, index, data)
static MODE_13_REGS: [(u8, u8, u8); 28] = [
    (0xC2, 0x00, 0x63),
    (0xD4, 0x11, 0x0E),
    (0xD4, 0x00, 0x5F),
    (0xD4, 0x01, 0x4F),
    (0xD4, 0x02, 0x50),
    (0xD4, 0x03, 0x82),
    (0xD4, 0x04, 0x54),
    (0xD4, 0x05, 0x80),
    (0xD4, 0x06, 0xBF),
    (0xD4, 0x07, 0x1F),
    (0xD4, 0x08, 0x00),
    (0xD4, 0x09, 0x41),
    (0xD4, 0x10, 0x9C),
    (0xD4, 0x11, 0x8E),
    (0xD4, 0x12, 0x8F),
    (0xD4, 0x13, 0x28),
    (0xD4, 0x14, 0x40),
    (0xD4, 0x15, 0x96),
    (0xD4, 0x16, 0xB9),
    (0xD4, 0x17, 0xA3),
    (0xC4, 0x01, 0x01),
    (0xC4, 0x02, 0x0F),
    (0xC4, 0x04, 0x0E),
    (0xCE, 0x00, 0x00),
    (0xCE, 0x05, 0x40),
    (0xCE, 0x06, 0x05),
    (0xC0, 0x30, 0x41),
    (0xC0, 0x33, 0x00),
];

static PALETTE: [u32; 256] = [
    0x000000, 0x0000AA, 0x00AA00, 0x00AAAA, 0xAA0000, 0xAA00AA, 0xAA5500, 0xAAAAAA, 0x555555,
    0x5555FF, 0x55FF55, 0x55FFFF, 0xFF5555, 0xFF55FF, 0xFFFF55, 0xFFFFFF, 0x000000, 0x330000,
    0x660000, 0x990000, 0xCC0000, 0xFF0000, 0x003300, 0x333300, 0x663300, 0x993300, 0xCC3300,
    0xFF3300, 0x006600, 0x336600, 0x666600, 0x996600, 0xCC6600, 0xFF6600, 0x009900, 0x339900,
    0x669900, 0x999900, 0xCC9900, 0xFF9900, 0x00CC00, 0x33CC00, 0x66CC00, 0x99CC00, 0xCCCC00,
    0xFFCC00, 0x00FF00, 0x33FF00, 0x66FF00, 0x99FF00, 0xCCFF00, 0xFFFF00, 0x000033, 0x330033,
    0x660033, 0x990033, 0xCC0033, 0xFF0033, 0x003333, 0x333333, 0x663333, 0x993333, 0xCC3333,
    0xFF3333, 0x006633, 0x336633, 0x666633, 0x996633, 0xCC6633, 0xFF6633, 0x009933, 0x339933,
    0x669933, 0x999933, 0xCC9933, 0xFF9933, 0x00CC33, 0x33CC33, 0x66CC33, 0x99CC33, 0xCCCC33,
    0xFFCC33, 0x00FF33, 0x33FF33, 0x66FF33, 0x99FF33, 0xCCFF33, 0xFFFF33, 0x000066, 0x330066,
    0x660066, 0x990066, 0xCC0066, 0xFF0066, 0x003366, 0x333366, 0x663366, 0x993366, 0xCC3366,
    0xFF3366, 0x006666, 0x336666, 0x666666, 0x996666, 0xCC6666, 0xFF6666, 0x009966, 0x339966,
    0x669966, 0x999966, 0xCC9966, 0xFF9966, 0x00CC66, 0x33CC66, 0x66CC66, 0x99CC66, 0xCCCC66,
    0xFFCC66, 0x00FF66, 0x33FF66, 0x66FF66, 0x99FF66, 0xCCFF66, 0xFFFF66, 0x000099, 0x330099,
    0x660099, 0x990099, 0xCC0099, 0xFF0099, 0x003399, 0x333399, 0x663399, 0x993399, 0xCC3399,
    0xFF3399, 0x006699, 0x336699, 0x666699, 0x996699, 0xCC6699, 0xFF6699, 0x009999, 0x339999,
    0x669999, 0x999999, 0xCC9999, 0xFF9999, 0x00CC99, 0x33CC99, 0x66CC99, 0x99CC99, 0xCCCC99,
    0xFFCC99, 0x00FF99, 0x33FF99, 0x66FF99, 0x99FF99, 0xCCFF99, 0xFFFF99, 0x0000CC, 0x3300CC,
    0x6600CC, 0x9900CC, 0xCC00CC, 0xFF00CC, 0x0033CC, 0x3333CC, 0x6633CC, 0x9933CC, 0xCC33CC,
    0xFF33CC, 0x0066CC, 0x3366CC, 0x6666CC, 0x9966CC, 0xCC66CC, 0xFF66CC, 0x0099CC, 0x3399CC,
    0x6699CC, 0x9999CC, 0xCC99CC, 0xFF99CC, 0x00CCCC, 0x33CCCC, 0x66CCCC, 0x99CCCC, 0xCCCCCC,
    0xFFCCCC, 0x00FFCC, 0x33FFCC, 0x66FFCC, 0x99FFCC, 0xCCFFCC, 0xFFFFCC, 0x0000FF, 0x3300FF,
    0x6600FF, 0x9900FF, 0xCC00FF, 0xFF00FF, 0x0033FF, 0x3333FF, 0x6633FF, 0x9933FF, 0xCC33FF,
    0xFF33FF, 0x0066FF, 0x3366FF, 0x6666FF, 0x9966FF, 0xCC66FF, 0xFF66FF, 0x0099FF, 0x3399FF,
    0x6699FF, 0x9999FF, 0xCC99FF, 0xFF99FF, 0x00CCFF, 0x33CCFF, 0x66CCFF, 0x99CCFF, 0xCCCCFF,
    0xFFCCFF, 0x00FFFF, 0x33FFFF, 0x66FFFF, 0x99FFFF, 0xCCFFFF, 0xFFFFFF, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
